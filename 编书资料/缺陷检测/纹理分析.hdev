<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="23.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>* 本例的任务是使用dyn_threshold算子检测网格中的缺陷。</c>
<c>* 通过这种方式，可以使用算子来查找与图像其他部分不同的纹理。</c>
<c>* Dyn_threshold是一个易于处理的算子。与像mean_image这样的平滑过滤器一起，</c>
<c>* 它可以提取局部与其邻域不同的对象。注意，算子dyn_threshold</c>
<c>* 只能用于检测纹理中的缺陷比纹理的其余部分更暗或更亮</c>
<l>read_image (Image, 'plastic_mesh/plastic_mesh_01')</l>
<l>dev_close_window ()</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window_fit_image (Image, 0, 0, Width, Height, WindowHandle)</l>
<l>set_display_font (WindowHandle, 18, 'mono', 'true', 'false')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (3)</l>
<c></c>
<c>* 首先，使用HALCON算子mean_image对图像进行平滑处理。</c>
<c>* mash的大小决定了提取对象的大小:mask大小越大，检测的区域就越大。</c>
<c>* mask的大小应该是要提取的物体直径的两倍左右。</c>
<c>* 随后，执行dyn_threshold并查找连接的区域。</c>
<c>* 操作符select_shape的参数area可以找到大小不同的区域。</c>
<c>* 最后对发现的错误进行计数和显示。</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files ('plastic_mesh', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<l>    mean_image (Image, ImageMean, 49, 49)</l>
<l>    dyn_threshold (Image, ImageMean, RegionDynThresh, 5, 'dark')</l>
<l>    connection (RegionDynThresh, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, ErrorRegions, 'area', 'and', 500, 99999)</l>
<l>    count_obj (ErrorRegions, NumErrors)</l>
<l>    dev_display (Image)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display (ErrorRegions)</l>
<c>    * 如果错误数超过零，则提示“Mesh not OK”</c>
<c>    * 否则，网格是完好无损的</c>
<c>    * 显示“Mesh OK”。</c>
<l>    if (NumErrors &gt; 0)</l>
<l>        disp_message (WindowHandle, 'Mesh not OK', 'window', 24, 12, 'black', 'true')</l>
<l>    else</l>
<l>        disp_message (WindowHandle, 'Mesh OK', 'window', 24, 12, 'black', 'true')</l>
<l>    endif</l>
<c>    * 如果要检查的图像的序列号</c>
<c>    * 低于14，要求按“Run”继续出现。</c>
<c>    * 如果读取最后一个图像，按“Run”将清除SVM。</c>
<l>    if (Index &lt; 14)</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
